// This file was generated by MyCCompiler.DevTools.AstGenerator on 8/6/2019 12:18:42 AM
namespace MyCCompiler.Frontend
{
    public abstract class Expr
    {
        public abstract TResult Accept<TResult>(IExprVisitor<TResult> visitor);
    }

    public interface IExprVisitor<out TResult>
    {
        TResult VisitBinaryExpr(Binary expr);
        TResult VisitGroupingExpr(Grouping expr);
        TResult VisitLiteralExpr(Literal expr);
    }

    public class Binary : Expr
    {
        public Expr Left { get; }
        public Expr Right { get; }
        public Token Op { get; }
    
        public Binary (Expr left, Expr right, Token op)
        {
            Left = left;
            Right = right;
            Op = op;
        }
    
        public override TResult Accept<TResult>(IExprVisitor<TResult> visitor)
        {
            return visitor.VisitBinaryExpr(this);
        }
    }

    public class Grouping : Expr
    {
        public Expr Expression { get; }
    
        public Grouping (Expr expression)
        {
            Expression = expression;
        }
    
        public override TResult Accept<TResult>(IExprVisitor<TResult> visitor)
        {
            return visitor.VisitGroupingExpr(this);
        }
    }

    public class Literal : Expr
    {
        public object Value { get; }
    
        public Literal (object value)
        {
            Value = value;
        }
    
        public override TResult Accept<TResult>(IExprVisitor<TResult> visitor)
        {
            return visitor.VisitLiteralExpr(this);
        }
    }
}
